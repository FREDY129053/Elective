#include <iostream>
#include <vector>
#include <string>
#include <algorithm>

using namespace std;

class BigNumber {
  private:
    vector<int> digits;
    bool is_negative = false;
    static const int BASE = 10;

    // Удаление незначащих нулей
    void trim() {
      while (digits.size() > 1 && digits.back() == 0) {
        digits.pop_back();
      }
      if (digits.size() == 1 && digits[0] == 0) {
        is_negative = false;
      }
    }
    
    static bool abs_less(const BigNumber& a, const BigNumber& b) {
      if (a.digits.size() != b.digits.size()) {
        return a.digits.size() < b.digits.size();
      }
      for (int i = a.digits.size() - 1; i >= 0; --i) {
        if (a.digits[i] != b.digits[i]) {
          return a.digits[i] < b.digits[i];
        }
      }

      return false;
    }
  public:
    // Начальное значение 0
    BigNumber() { digits.push_back(0); }

    // Преобразование строки в число
    BigNumber(const string& number) {
      int start = 0;
      is_negative = false;

      if (number[0] == '-') {
        is_negative = true;
        start = 1;  // Пропускаем минус, т.к. мы уже запомнили, что число отрицательное
      }

      for (int i = number.size() - 1; i >= start; --i) {
        if (!isdigit(number[i])) {
          throw invalid_argument("Все символы числа должны быть цифрами!!!");
        }
        digits.push_back(number[i] - '0');
      }
      trim();
    }
    
    // Преобразование числа в длинное число
    BigNumber(int number) {
      if (number < 0) {
        is_negative = true;
        number = -number;
      } else {
        is_negative = false;
      }

      if (number == 0) {
        digits.push_back(0);
      }

      while (number > 0) {
        digits.push_back(number % BASE);
        number /= BASE;
      }
    }

    // Преобразование длинного числа в строку
    string to_string() const {
      string result = is_negative ? "-" : "";
      for (int i = digits.size() - 1; i >= 0; --i) {
        result += ('0' + digits[i]);
      }

      return result;
    }

    // Сложение
    BigNumber operator+(const BigNumber& other) const {
      if (this->is_negative == other.is_negative) {
        BigNumber result;
        result.is_negative = this->is_negative;
        result.digits.clear();

        int carry = 0;
        size_t max_len = max(digits.size(), other.digits.size());

        for (int i = 0; i < max_len || carry; ++i) {
          int t1 = (i < digits.size()) ? digits[i] : 0;
          int t2 = (i < other.digits.size()) ? other.digits[i] : 0;
          int sum = t1 + t2 + carry;
          result.digits.push_back(sum % BASE);  // 9 + 9 = 18 -> 8 in array
          carry = sum / BASE;  // 1 in mind
        }
        result.trim();

        return result;
      } else {
        if (this->is_negative) {
          return other - (-*this);
        } else {
          return *this - (-other);
        }
      }
    }

    // Отрицание числа(унарный минус)
    BigNumber operator-() const {
      BigNumber result = *this;
      if (!(digits.size() == 1 && digits[0] == 0)) {
        result.is_negative = !is_negative;
      }

      return result;
    }

    // Вычитание чисел
    BigNumber operator-(const BigNumber& other) const {
      if (this->is_negative != other.is_negative) {
        return *this + (-other);
      }

      if (abs_less(*this, other)) {
        BigNumber result = (other - *this);
        result.is_negative = !this->is_negative;
        return result;
      }

      BigNumber result;
      result.digits.clear();
      result.is_negative = is_negative;

      int carry = 0;
      for (int i = 0; i < digits.size(); ++i) {
        int t1 = digits[i];
        int t2 = (i < other.digits.size()) ? other.digits[i] : 0;
        int sub = t1 - t2 - carry;
        if (sub < 0) {
          sub += BASE;
          carry = 1;
        } else {
          carry = 0;
        }
        result.digits.push_back(sub);
      }
      result.trim();

      return result;
    }

    // Умножение чисел
    BigNumber operator*(const BigNumber& other) const {
      BigNumber result;
      result.digits.assign(digits.size() + other.digits.size(), 0);
      result.is_negative = is_negative != other.is_negative;

      for (int i = 0; i < digits.size(); ++i) {
        int carry = 0;
        for (int j = 0; j < other.digits.size() || carry; ++j) {
          long long mul = result.digits[i + j] + digits[i] * 1LL * (j < other.digits.size() ? other.digits[j] : 0) + carry;
          result.digits[i + j] = int(mul % BASE);
          carry = int(mul / BASE);
        }
      }
      result.trim();

      return result;
    }

    // Деление чисел
    BigNumber operator/(const BigNumber& other) const {
      if (other == BigNumber(0)) {
        throw runtime_error("Деление на ноль нельзя, неуч! INF будет");
      }

      BigNumber divined = *this;
      BigNumber divisor = other;
      divined.is_negative = divisor.is_negative = false;

      BigNumber result, current;
      result.digits.resize(digits.size());

      for (int i = digits.size() - 1; i >= 0; --i) {
        current.digits.insert(current.digits.begin(), digits[i]);
        current.trim();
        int x = 0, l = 0, r = 9;

        while (l <= r) {
          int m = (l + r) / 2;
          BigNumber t = divisor * m;
          if (t <= current) {
            x = m;
            l = m + 1;
          } else {
            r = m - 1;
          }
        }

        result.digits[i] = x;
        current = current - (divisor * x);
      }

      result.is_negative = is_negative != other.is_negative;
      result.trim();

      return result;
    }

    // Остаток от деления
    BigNumber operator%(const BigNumber& other) const {
      if (other == BigNumber(0))
          throw std::runtime_error("На 0 нельзя");

      BigNumber quotient = *this / other;
      BigNumber remainder = *this - (quotient * other);

      if (remainder.is_negative) {
          remainder = remainder + other;
      }

      return remainder;
    }
    
    bool operator<=(const BigNumber& other) const {
      if (is_negative != other.is_negative) {
        return is_negative;
      }

      if (digits.size() != other.digits.size()) {
        return is_negative ? digits.size() > other.digits.size() : digits.size() < other.digits.size();
      }

      for (int i = digits.size() - 1; i >= 0; --i) {
        if (digits[i] != other.digits[i]) {
          return is_negative ? digits[i] > other.digits[i] : digits[i] < other.digits[i];
        }
      }

      return true;
    }

    bool operator==(const BigNumber& other) const {
      return is_negative == other.is_negative && digits == other.digits;
    }

};

ostream& operator<<(std::ostream& os, const BigNumber& num) {
  os << num.to_string();
  return os;
}

int main() {
  BigNumber a("9103904675255262860178149473033763573920869706059499249919254901269424807345277727635577253118351555752208001757789343733870700830670288634321180019787127585995734113617558707098724581034638278273838688343512544641252489809798517522659787811868631660174870299549288967381830993303234097396552741842234016280576927146363918845646166583057691110590475416433103416060198418571152541330311435517946432532164467688196274442215598076041069865009125365553408574107494952534362510309758913614522779542128844642053934407022918214890800840464628383794460117655447164204262019088470176606723599821176850796679536954435609467840920733665302321474326499080310385676433157873617947095178876644630787060325493971294733004629701316093911066157003472457149067804717951757163251818790387099574417120805020260768753575070041259950017087743455172887002880364510573644465242816191142023483242610413170978288734492271903552046867360916248913792657020660441406959858251184253218838744983630473460184660812452281205989707512410894965572597366147552539439042442307756126655478023542760672775118673724976277922684451384067270655542220276117444067276014331979590860809142430891507491886534450372735753080869397272038250966107202485533517003902375289791035173333374594314371169341924933252744421329176068475419793521140571244480717924326982967876920729181112296059598878625793725968744141779216183634007380387246804331430835961537885052877461663706514208113702692729289514430547256817062836355793737786883370812798906184050257409046773486491680785210812354578058515253734202985349891264926138481389870583682627832181880374411054448865911630231650207170439865495096753833394479017532563215245896371267600469635335862373855301431629800151663881573467993384633878376124541641161283979189026620600296457417301803387249179500503970967755987447258012149046927331534882701985599855049062210701197845664246838434329406327267071841596091126722897823206831644369104039686290428705540625065086974466492871683983921475131596723273609498371856444311191541748284302122046668996017079559656685561921708002314824127537217209682500559865833753133792200260515559164841545804841287254998946832415449147958630394909550291240592383312062240393648767655529835907584290297987685997605657338173581782933445457559454932572284691661724338046254640469493217452358950338402620125138677534611790299047598917371280208357959802291753828803763568147341245608488430610314071245585119746173003699192391878500542724645675999496775830261801900078383052971596841308839869708248606659072381166828566985534089973277853116745077630594663089404829341685906895996729697757905385880240216033956033451160854402605997853130611275304903344518487046231898049845999165122709138509244865845553212570876095349240431317972209919846603511207214720606648471486950841647514750261436887758657994154064241766283284943193871809070370158646306026280787455340268156335360871210941680303862726740935609052385471932225750213880572564084975547409395326263080299372652880694619600499380803358834533984465770081249414319172274148410302245917853312667391268793575561255171855496144078796223310758127281058843152153227954971670573626827447547652946372535520665420643457006285596178491344723407070348885756477562840151066655683509842313689353807878843527526865548736066994051208625524181577989515827576976010896708009848099862576218502096788864261820618732475339319316722451099225128082656660301124797287200267980637818821867610727412688014522436964125784919150891144852736674765953418276624818586106988396262577115471654046716590134040054664064542254253162236502352847253484228522084353683256847764028408458739829024220190750666827983639363215469649001112233571879527682180633892851961865571622576397265880619393130757430243189315287081670520878514434184683553797254883676603241200165252052660779680212643683491525695343532408839552178809912902365555508365106104053789112508509269979576714895611027726257744956351773959336230059162117074701973412396752003070333783564760959763969084960262437231802874400049450040030650261233363878142952031804843533937250514055084661841843338144515423496264829959587318471728370604868796419626610294669047472892808682461217912016722300952051881861086161977082818439372651645809100787345800078773427453795075305723630859834579295719916791818295702768509796152127996105605820396574020507280573215700759662926666331439002210125790875492573126583753764400639893990434401969861584790530460575990161663656903093717707566783828854835770405333943862506214198648557484349659447123750947145202604286606016907283048121429622227874728900994865757084371796242981448588795935371300827113305966676719434429404936762437197055604147784418799939096898738152864666568089146843938140529976696222208885417240526722565707818013764322141629565017996892887367551268035727571472468863062687518058395383154485242104513666377750409900193725768684997367881731827263382133050211810654754847622548606308004555502673596598503047588897551699842237337079920550593414282806919036489255285891568202744543411864210757967072201629605560824833163313901458252910071084272618519014496380835989473705265567019977387447293014774401029169272533061679062971222476537152606216537327195257175989803882601067968885894864310079448637822144114069315925483342501732855337935538341377104779248929957070110138739568364568814817418476221382379809282233563221436484840484171068137716669161968934297089758579637948560249973824729232211660768871569812345273999375955799588448410161749449168272688287033348889180170567452535116885246089656761949600066294455307924564051398896623923263172615824723122796117555821946030613531559690083604730253896146636247455755572426807288273152748738588706189397927119270607373451953291776602484610693947452522737905792835735468727656752980612234392588369166527392183416746911308661523237592270499557278947789131926621528266981594560168155113706380544188417236605590569327115831055163928317493120741930721535971825762432287628348197812217242313004891814333613333037115359133351166518591743296124135258411185076350389000176223212897755612605940695892139649123574855338031518744124326251075539521410116030962267487645765605839043948880892898783154557477343316223719263074024460957245193741769163013517670627229762416309550918800173296938351013978454422662266329687723824313546383573523401443032522962849680488692243540931656547433138532310809194880194210041548401431719863220881955196722686967005710752797372092810827505724488484659297125004426138139967363557597691906347158978803763677026516834734838519179234106217132596939409972675174682598999174709098153270165278624434646949747717700565968877667994425438134447886903448486212949147135242696126294642142457207671018887683849260704650463664322301646908167207838359535793404649456925805662086674193318107733190749647058872138291435352374230593245811965161607572841938467490679859347184417249465278342309774334741289381520564789540581072891391991845782804754744024355881937342244225215714091548541795913899267150615846161265604419186843897573653347630915245650444578792026295572000895070932742834857857821312593240661022787591732993152799353169575467631490595048659227883529188100030921394942908439362974275547804607678675395930289499965703208448477178788199416467792922455701780882280172220530660884765558075703122598916807103954033258982254467750316662419192118830611253697745790503751344840014517086944485657627392435984632724373179464489838428476739370831147846258686362300599292919013414896973224396758587068996352881738255296833139004386355935167446868614612192113607043296051154393195202868011789173616410495584541338265403225629403910224863020497954258089683897409781843400556838281179695281213220809799103936118976444568012865497257965209278491277245399124286034472529357382541039898426115783453554928958843494097347723780171239421216408894137621460574307341973824350911230413752248979318613282446991593975834616622414904757116465486615533563637971530779198873576175766788272476756592742819348732427376871761202022181700931351061959708027452679468856987239789847755337729943374435172988544542098773836122315845232596189644445934322476179605655853153027158988488027457420628472422720341312029735551912541585015871165176852879716405182012732680876579524683128945366784555610168913257041651452842921301289218382999834790739141557326863029090408221464080880633585889531309018390391510330834517176493078992315321256544064010039083986718882349195535684721643819226549090263504906733192781591916747187412332261478716245295571992853162182906716571152484885918791652499433403514421961297499402293837011159952206877348670570391508046368354692926490027156509619338666311388267795370169834535273921068660114840229482467186799229997528059335029136234700728705670102660946478129558784036121261451058830859439277870407494451010573756356910322250841298352620680685448315832458094232350769986878659739388521375515827614036624309643602564471085367839465466159236926371086236046025801848911970031408076189531743195174795915338078484647182198874335638954527638633348818585496780747356436078094479320097283479297699640679975414602104559826329600383903423237904618183399500520429726137861907629353070115350192066462463215766013177134808608148997368378772476964518964650912247850701382998170326884127682167406955009890317015747865082000781156823840735012504853200211310067175613542176312850518061182029801872880241154865337282201939410444839010539955704349434795603298076746212562127374530757272931919848122508626778728354699087231560213015048936990401016176647357968575410009132674754121015321084779828248110041746978787022036738844418595556478463317142695266234374164657763503182302429928490489854754899769891817959007286663652954035118915874072740055790105334659552351500038275811014397834751373770311606538787454628661285450364410376270242433110776796115177681389013137566514462420272369220568679855326765806902384749511077064320589105589331417356141551863695270116861273279013781424268146647502934175427230123629178382925573306238072050685996563");
  BigNumber b("2727770504557176022492946649659306221252218904984982800536724259554463637904869292337267381446448792436339553663099996431787949707506977567195128701951316668163447978506077599095015520300458049935519737893027269104951989326119004468252667694906118103078889998905531017429709921458560495435489140046336109341805665024090531256904078366695452911813803754086182796540522814192797748103923784203548623168757637264700623004229078222011627661823661937559320214014694077040424012069174779740515216915085433609772384299736586413741628856747983080158644751182201550839909847755311735056132340989857606357689372911966338449595596635521382145533651285226135962217598591033557551647721965589208544872892975659932230327493497020322610226547072427820278106835391129487378021860479954598286571579783200748203580474291838606111755224642655445196467536791158638973468965509177916414028831553670888002309196475252238194565395138596922008461001216406040712635610633144430481273943539388713445624942264173398389306092301918755104631145329006068888854781942964116778965030661110786044929159013999187058874937955860725430213704963909535909026582445757428879131166694210385283338999662743987280336944731651079537761187092519035889175111290900226214145100307837517608453701799076130664664423989084776005937883180274559757520403857310533903938190691101853713864345136133698184231037125923541954728148991481928045201325166773547099237769422262488039577436948921490841653343759175437605145145565148575503704574866589547221329034027545960416011470904612862794452472322055715735907974115084784855487377778858573169749686755878946341688744337290938878700765002588643741234173133783453011650650523661441095649208507454063264053421371405768383406824714999008274426494422477939202645731784325102160866107714494996348739933962865947157240110749006092875637846785035279223915671071408765815388908300708330868930992758432001108321558727446514546516309487581020476200749457921699714045182973087653088295188717669725409694228044955150647186994120800677498593635385289807814910273418657830949948735682031364443461699063305875530441045428041761807358371549265554086278843005456529445204656973066770198829888901158521098850791209640883944777752283876982981812003456189000715430474918332162790564531680186178611228768258979656344455706692225928607411393021470730757404533811147126886621754048242566688586323864102949895292802951178902979702635223231725048510256747648446932598908940128814862213364867480956618548835421846473626049668413752316407686275891749106517957051511408848792738654484250325142483807170485159820100043575324847601791019129583973130680738749096209196862080328723568371999071550463553257402222245025478078994562582951999055085208919418208442687421836416906173088719917243466988012415143350010136913895670205342650539728540575331091433299226889308026974738427678056856675576919319262247639308244754019116456887501805591120851882131510218042323398127063568003767997862194883560866174092538514779706469699893992443185569205762586700272868210205600506892595752067506676246030552868690411446738261493763399610501142707975833036822534749298550136291342191388964648510926930606231819859600548980710905980127641950210264996137187268521059671893051620053686635944869375392820107921616843804470147790188415727475433839307269923205058788598822893664304462005431439959089087018885034244485641978819117145652725195188520175693106376434691188970491081646559171312618582467182604660761296486259374358507656788491619773021677617462696746843846547176899153250735963358681180815954828489396813095802743172649265642692987725233443757353598711077069021325786254946152963839058303312241245468938401263073476123402992170585440242731783916994773019503236920330665512166571767561915850781046342173022404082743731746287030787138525694137541066481942344977965140691953457694874956472742554077644404420127748610072783413882103381249118662538409158570502804995926409250892490327113894085863308883228245739175329884648231484111468116901396420808584680947667277422050350074042243067263175166290701112612241131752590771207722225155434381168396384912386452495355319698744459644066128141517882350682568930018922636367048113604346983128925773982183692398533841468387141848140243006622017761147494955285609345834210592434475211794125455949826429696183770646029749708823803630887438768030772204239273085424433318566839163241061099842509178185106300001842587333284998639084568676645533512720967260489633684911286000248083827067046323007879034376985559225852287141514698444576358968555571972924036413681722048095152469064797836407459251100776192293854595431760507677306594121445868123842186812388277890329789497966245219391220621002976703700406996090180827699925123309205894427171808526887042027739708630217235662016551646701449939667934143043663733057591166141263766961075492270261819541717579207957335711421219089924125761442602564351098730525013227925229648917776996320978394627187187736884131644254183407337664089809714664860459409788230010066856783738199799081578062371200325399834831506748604174486035187592066183221196728986206169585135764201738893923644766699153514323464572727446872830424606206902681700335277160819774446022403374422031921727474648355803315108800070156927506077477166819326821896180844498250681561644405463253775248992136464344375125469441794849681355461781294892855513872967355495535783840473489266719603385315120900144404783275450572402854935751580422887142820127624283187381336421234850348239508427597530458832393737664340940699399754957011390306932223860438054377807807387590894550969708454558074779368360806752315904862354407954166694246378044022675394631271889186019239014247244161863352988734388065327984180029211978524580412421845430734976408171164526514950776717033992983032958305629796832490055693962359983886254604110908094097637929123547058728260130594330733533918488025883638252428332458646181182711886551687610077858502365180243481364194338392735502832675484954170778167923143820752106816206989429886853764100262413887674009990394651654884686235686267043307801572326094244149306980074534835203783537877284126543973718835006596719917335508389976629614082563725612708805074497639286566403815754964787050017445600593331700909424242803416481619596450618512452652943514168384781194341937599232557050783948166752630863252341428057726514422674272583294422231680040172361357703433196265479561752229809086435049129367458004873585377643760275321250774045517378657593241790403631478065067699497400117348086992485530719461600687214133015333799197427639953816356254488987828472869223060357185229088039707543455155215638403127867175500872013348690337928638203706015714950665749112679780121575599155206984263403721503976956365282861180941809352985349938913206412804613645866509662817551341957442497029850212574274043671995706847445819727154041463877594502255058006699594867983569938036865780453625163660545864278994687616499496565640050249936729413404932224714848719952269072843645212096979041643728204564125636109552950408307249051765538094449005522951893788998941475133813221454848667051807393175117510831625349619078386599539837346868028755044812640091864539614657674643800667246651281822946195039958000433850627135604551403905673206146823906421078190049843657880814339245756044387233805097374569879109842406738982341239221355819672089539849668934565771990264538421597558217673095171533827197763944185811109231505797547738000034048016351674018645664128714789968676588107760623471064143068804193722409361742120733063946855631269008264483454007433429730859714829037797874790774732975954929201074782635839029388397327778123266801032174862736691273514316071394559326399714860853443011805006935514952978161738330890496503194952491883278973639407549070782203520472513827848791201901266487385194351623537925044222336715983763220705042197885388685813643177774716902586847088630630491165995108073581805956225003978662334516728107092955155794603562665933815488299748633412073127502474632365907028175486253941916192091048980043121423812041686839103334561758242713654169378644858850952262618745633198763442263285125811315292777850300276309466932914734301353614030959870064347651236163900307522102361965358277930889253349576598023303273764449972053061774588062308369697652181961577450229584546358636189652880520873156081638770130387176682598051401643866051287702204417181897986486076937207652684545720998734044202889659429487054613719969524203816306676080060038207802366771169036903875963965541930732349074632674920876720107456870334952248447185576569108645969130966438079827048300097129436837136021286988109316740443212253056650428252383330980921263180753162193450123378607248153603792879288983766869560455611054464158599327629308084554791458530700983947230746621867381552610321070993783652156429432375558964194493766964978156897162839644002363699337484909918793992114952060513528106621997502420303735914960802208135558662057993200159570295475193804154668254885057444745191054452347664513434295967930313202394226969942016527134014515501067144804054358664841183353374585201646473468524086508529545513581252145126750547176185963843234081463043377303413541428314480605085034678433846237810020758174918953413568747345256920715069077663612989782444818240698966988705465384940435671877666860727340134631725961801326132696836782048516524535295535981007282279031412126902505663590614388741757739953747838540540850088676051783463242075398214693982394875411482638266449917778097923355312104340750214730737281309335478365783878894703384400610647423093200613008704346405478297533034008393987632337781033370001205790187903796658197070507025660961450601586361611134632967206364818956898806646974503731130011026029729711637259466505138737026099561261469950183898799705008720827500322160896896376778950574216225960588986460192613295806971062930830428647550460916582965518214744562714701807662989180965156632056391201252451995539856725782819771789405766186846887944400988804027130711272151820777085601613478245339587026944489356678235739762233252204106656235443");
  // BigNumber a("-12345678901234567890");
  // BigNumber b("9876543210");

  cout << "a = " << a << endl;
  cout << "b = " << b << endl << endl;

  cout << "Резульаты операций" << endl;
  cout << "a + b = " << a + b << endl;
  cout << "a - b = " << a - b << endl;
  cout << "a * b = " << a * b << endl;
  cout << "a / b = " << a / b << endl;
  cout << "a % b = " << a % b << endl;
}