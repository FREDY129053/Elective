#include <iostream>
#include <string>
#include <vector>
#include <memory>  // GPT —Å–∫–∞–∑–∞–ª –¥–ª—è –ø–∞–º—è—Ç–∏

// –°–æ–∑–¥–∞–¥–∏–º –æ–±—â–∏–π –ê–ë–°–¢–†–ê–ö–¢–ù–´–ô –∫–ª–∞—Å—Å, –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—Å–µ –±—É–¥—É—Ç –Ω–∞—Å–ª–µ–¥–æ–≤–∞—Ç—å—Å—è
// –≠—Ç–æ –µ—â–µ –æ–¥–∏–Ω —É—Ä–æ–≤–µ–Ω—å –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–∏

/*
  –ü–æ —Å—É—Ç–∏ —ç—Ç–æ –∑–Ω–∞—á–∏—Ç:
    –Ø —Å–æ–∑–¥–∞–º –∫–ª–∞—Å—Å Animal –≤ –∫–æ—Ç–æ—Ä–æ–º —É–∫–∞–∂—É –≤—Å–µ –º–µ—Ç–æ–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –≤ –µ–≥–æ –ø–æ—Ç–æ–º–∫–∞—Ö

  –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –∫–ª–∞—Å—Å —É–¥–æ–±–µ–Ω, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å —á—Ç–æ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤—ã–≤–∞—Ç—å—Å—è
*/
class Animal {
  protected:
    int healthPoint;
    float moveSpeed; 
    std::string livingEnv;  

  public:
    Animal(int hp, float speed, std::string env) : healthPoint(hp), moveSpeed(speed), livingEnv(env) {}

    // –ö–ª—é—á–µ–≤–æ —Å–ª–æ–≤–æ virtual –¥–ª—è –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –≤ –¥–æ—á–µ—Ä–Ω–∏—Ö –∫–ª–∞—Å—Å–∞

    /*
      = 0 –≥–æ–≤–æ—Ä–∏—Ç –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä—É, —á—Ç–æ —É —ç—Ç–æ–≥–æ –º–µ—Ç–æ–¥–∞ –Ω–µ—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ –±–∞–∑–æ–≤–æ–º –∫–ª–∞—Å—Å–µ, –∏ –æ–Ω –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ –∫–ª–∞—Å—Å–µ-–Ω–∞—Å–ª–µ–¥–Ω–∏–∫–µ.

      –¢–∞–∫–∏–µ –∫–ª–∞—Å—Å—ã —Å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∏–º = 0 –Ω–∞–∑—ã–≤–∞—é—Ç—Å—è –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–º–∏, –∏ –∏—Ö –Ω–µ–ª—å–∑—è —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–∞–ø—Ä—è–º—É—é!
      –ü—Ä–∏–º–µ—Ä:
        Animal a(100, 2.5, "land");  // –û—à–∏–±–∫–∞! –ù–µ–ª—å–∑—è —Å–æ–∑–¥–∞—Ç—å –æ–±—ä–µ–∫—Ç –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞

      –ù–æ –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –æ–±—ä–µ–∫—Ç –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç –≤—Å–µ = 0 –º–µ—Ç–æ–¥—ã.
    */

    virtual int getHealth() const = 0;
    virtual void setHealth(int health) = 0;
    
    virtual int getSpeed() const = 0;
    virtual void setSpeed(int speed) = 0;

    virtual void animalInfo() = 0;

    virtual void saySomething() = 0; 

    virtual ~Animal() = default;  // –î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä, –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ø–∞–º—è—Ç–∏, –≤ –°++ –∂–µ –Ω–µ—Ç —Å–±–æ—Ä—â–∏–∫–∞ –º—É—Å–æ—Ä–∞üòí
};

class Pigeon : public Animal {
  public:
    Pigeon(int hp, float speed, std::string env) : Animal(hp, speed, env) {}

    // –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ override –ø–æ–∑–≤–æ–ª—è–µ—Ç "–ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å" —Ñ—É–Ω–∫—Ü–∏—é –≤ –¥–æ—á–µ—Ä–Ω–µ–º –∫–ª–∞—Å—Å–µ –∏ —Å–¥–µ–ª–∞—Ç—å –∏–Ω—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é

    int getHealth() const override {
      return healthPoint * 100;
    }
    void setHealth(int health) override{
      healthPoint = health / 100;
    }

    int getSpeed() const override {
      return moveSpeed * 10;
    }
    void setSpeed(int speed) override{
      moveSpeed = speed / 10;
    }

    void animalInfo() override{
      std::cout << "Animal lives in " << livingEnv << std::endl;
    }

    void saySomething() override {
      std::cout << "Pigeon says: Cock-a-doodle-doo!" << std::endl;
    }
};

class Dog : public Animal {
  public:
    Dog(int hp, float speed, std::string env) : Animal(hp, speed, env) {}

    int getHealth() const override {
      return healthPoint * 2;
    }
    void setHealth(int health) override{
      healthPoint = health / 2;
    }

    int getSpeed() const override {
      return moveSpeed * 15;
    }
    void setSpeed(int speed) override{
      moveSpeed = speed / 15;
    }

    void animalInfo() override{
      std::cout << "Animal lives in " << livingEnv << std::endl;
    }

    void saySomething() override {
      std::cout << "Dog says: Gav-gav-no!" << std::endl;
    }
};

class Dolphin : public Animal {
  public:
    Dolphin(int hp, float speed, std::string env) : Animal(hp, speed, env) {}

    int getHealth() const override {
      return healthPoint * 3;
    }
    void setHealth(int health)override {
      healthPoint = health / 3;
    }

    int getSpeed() const override {
      return moveSpeed * 2345678;
    }
    void setSpeed(int speed) override{
      moveSpeed = speed / 2345678;
    }

    void animalInfo() override{
      std::cout << "Animal lives in " << livingEnv << std::endl;
    }

    void saySomething() override {
      std::cout << "Dolphin says: F*ck Microsoft!" << std::endl;
    }
};

int main() {
  /*
    –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –±—ã–ª–æ —Ç–∞–∫:
    std::vector<Animal*> animals = { new Pigeon(), new Dog(), new Dolphin() };
    ...
    for (auto& animal : animals) {
      delete animal;
    }

    –ù–æ GPT —Å–∫–∞–∑–∞–ª –ø–æ–º–µ–Ω—è—Ç—å, —á—Ç–æ–±—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å:
      üëâ –í—ã–≤–æ–¥: –ò—Å–ø–æ–ª—å–∑—É–π unique_ptr –∏ –Ω–µ –ø–∞—Ä—å—Å—è —Å delete! üöÄ
  */
  std::vector<std::unique_ptr<Animal>> animals;
  animals.push_back(std::make_unique<Pigeon>(100, 23.5, "Air"));
  animals.push_back(std::make_unique<Dog>(20, 12.2, "Earth"));
  animals.push_back(std::make_unique<Dolphin>(300, 45.6, "Water"));

  for (const auto& animal : animals) {
    animal->animalInfo();
    animal->saySomething();
    std::cout << "Health: " << animal->getHealth() << std::endl;
    std::cout << "Speed: " << animal->getSpeed() << std::endl;
    std::cout << std::endl;
  }

  return 0;
}

// –ê–±—Å—Ç—Ä–∞–∫—Ü–∏—è —Å—Ç—Ä–∞–Ω–Ω–Ω–∞—è –≤–µ—â—å - –µ–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–Ω–æ–≥–æ –∏ —Ç–æ–≥–¥–∞ –±—É–¥–µ—Ç –ø–ª–æ—Ö–æ, –µ–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–∞–ª–æ –∏ —Ç–æ–≥–¥–∞ –±—É–¥–µ—Ç –ø–ª–æ—Ö–æ
// –ü–æ –Ω–∞–∏—Ç–∏—é –Ω–∞–¥–æ –¥–µ–ª–∞—Ç—å)